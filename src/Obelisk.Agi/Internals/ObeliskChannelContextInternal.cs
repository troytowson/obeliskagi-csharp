using System;
using System.Collections.Generic;
using System.Text;

namespace Obelisk.Agi.Internals
{
    /// <summary>
    /// Represents a request from Asterisk.
    /// </summary>
    internal class ObeliskChannelContextInternal : IObeliskChannelContext
    {
        /// <summary>
        /// The first argument that was passed to the AGI() or EAGI() application. For process-based AGI, this is the name of the AGI application that has been executed. For FastAGI, this would be the URL that was used to reach the FastAGI server.
        /// </summary>
        public string RequestUrl
        {
            get;
            private set;
        }

        /// <summary>
        /// The name of the channel that has executed the AGI() or EAGI() application.
        /// </summary>
        public string ChannelName
        {
            get;
            private set;
        }

        /// <summary>
        /// The language set on agi_channel.
        /// </summary>
        public string Language
        {
            get;
            private set;
        }

        /// <summary>
        /// The channel type for agi_channel.
        /// </summary>
        public string Type
        {
            get;
            private set;
        }

        /// <summary>
        /// The uniqueid of agi_channel.
        /// </summary>
        public string UniqueId
        {
            get;
            private set;
        }

        /// <summary>
        /// The Asterisk version in use.
        /// </summary>
        public string Version
        {
            get;
            private set;
        }

        /// <summary>
        /// The full caller ID string that is set on agi_channel.
        /// </summary>
        public string CallerId
        {
            get;
            private set;
        }

        /// <summary>
        /// The caller ID name that is set on agi_channel.
        /// </summary>
        public string CallerIdName
        {
            get;
            private set;
        }

        /// <summary>
        /// The caller presentation associated with the caller ID set on agi_channel. For more information, see the output of core show function CALLERPRES at the Asterisk CLI.
        /// </summary>
        public string CallingPres
        {
            get;
            private set;
        }

        /// <summary>
        /// The caller ANI2 associated with agi_channel.
        /// </summary>
        public string CallingANI2
        {
            get;
            private set;
        }

        /// <summary>
        /// The caller ID TON (Type of Number) associated with agi_channel.
        /// </summary>
        public string CallingTON
        {
            get;
            private set;
        }

        /// <summary>
        /// The dialed number TNS (Transit Network Select) associated with agi_channel.
        /// </summary>
        public string CallingTNS
        {
            get;
            private set;
        }

        /// <summary>
        /// The dialed number associated with agi_channel.
        /// </summary>
        public string DNID
        {
            get;
            private set;
        }

        /// <summary>
        /// The redirecting number associated with agi_channel.
        /// </summary>
        public string RDNIS
        {
            get;
            private set;
        }

        /// <summary>
        /// The context of the dialplan that agi_channel was in when it executed the AGI() or EAGI() application.
        /// </summary>
        public string Context
        {
            get;
            private set;
        }

        /// <summary>
        /// The extension in the dialplan that agi_channel was executing when it ran the AGI() or EAGI() application.
        /// </summary>
        public string Extension
        {
            get;
            private set;
        }

        /// <summary>
        /// The priority of agi_extension in agi_context that executed AGI() or EAGI().
        /// </summary>
        public string Priority
        {
            get;
            private set;
        }

        /// <summary>
        /// An indication of whether AGI() or EAGI() was used from the dialplan. 0.0 indicates that AGI() was used. 1.0 indicates that EAGI() was used.
        /// </summary>
        public string Enhanced
        {
            get;
            private set;
        }

        /// <summary>
        /// The accountcode associated with agi_channel.
        /// </summary>
        public string AccountCode
        {
            get;
            private set;
        }

        /// <summary>
        /// The threadid of the thread in Asterisk that is running the AGI() or EAGI() application. This may be useful for associating logs generated by the AGI application with logs generated by Asterisk, since the Asterisk logs contain thread IDs.
        /// </summary>
        public string ThreadId
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the name of the script.
        /// </summary>
        public string Script
        {
            get;
            private set;
        }

        /// <summary>
        /// Initialises a new instance of the ObeliskRequest class.
        /// </summary>
        public ObeliskChannelContextInternal(IEnumerable<string> lines)
        {
            Map(lines, new Dictionary<string, Action<string>>
            {
                { AgiVariableNames.REQUEST, val => RequestUrl = val },
                { AgiVariableNames.CHANNEL, val => ChannelName = val },
                { AgiVariableNames.LANGUAGE, val => Language = val },
                { AgiVariableNames.TYPE, val => Type = val },
                { AgiVariableNames.UNIQUEID, val => UniqueId = val},
                { AgiVariableNames.VERSION, val => Version = val},
                { AgiVariableNames.CALLERID, val => CallerId = val},
                { AgiVariableNames.CALLERIDNAME, val => CallerIdName = val},
                { AgiVariableNames.CALLINGPRES, val => CallingPres = val},
                { AgiVariableNames.CALLINGANI2, val => CallingANI2= val},
                { AgiVariableNames.CALLINGTON, val => CallingTON = val},
                { AgiVariableNames.CALLINGTNS, val => CallingTNS = val},
                { AgiVariableNames.DNID, val => DNID = val},
                { AgiVariableNames.RDNIS, val => RDNIS = val},
                { AgiVariableNames.CONTEXT, val => Context = val},
                { AgiVariableNames.EXTENSION, val => Extension = val},
                { AgiVariableNames.PRIORITY, val => Priority = val},
                { AgiVariableNames.ENHANCED, val => Enhanced = val},
                { AgiVariableNames.ACCOUNTCODE, val => AccountCode  = val},
                { AgiVariableNames.THREADID, val => ThreadId = val},
                { FastAgiVariableNames.NETWORK_SCRIPT, val => Script = val},
            });
        }

        /// <summary>
        /// Maps the lines to the actions.
        /// </summary>
        private static void Map(IEnumerable<string> lines, Dictionary<string, Action<string>> listToMap)
        {
            foreach (var line in lines)
            {
                var colonFound = false;
                var keyBuilder = new StringBuilder();
                var valueBuilder = new StringBuilder();

                foreach (var character in line)
                {
                    if (colonFound)
                    {
                        valueBuilder.Append(character);
                        continue;
                    }
                    
                    if (character == ':')
                    {
                        colonFound = true;
                        continue;
                    }

                    keyBuilder.Append(character);
                }

                var key = keyBuilder.ToString();

                Action<string> actionToExecute;
                
                if (!key.StartsWith("agi_") || !listToMap.TryGetValue(key, out actionToExecute))
                    continue;

                actionToExecute(valueBuilder.ToString().Trim());
            }
        } 
    }
}