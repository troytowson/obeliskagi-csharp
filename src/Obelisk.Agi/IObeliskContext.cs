namespace Obelisk.Agi
{
    public interface IObeliskChannelContext
    {
        /// <summary>
        /// The first argument that was passed to the AGI() or EAGI() application. For process-based AGI, this is the name of the AGI application that has been executed. For FastAGI, this would be the URL that was used to reach the FastAGI server.
        /// </summary>
        string RequestUrl
        {
            get;
        }

        /// <summary>
        /// The name of the channel that has executed the AGI() or EAGI() application.
        /// </summary>
        string ChannelName
        {
            get;
        }

        /// <summary>
        /// The language set on agi_channel.
        /// </summary>
        string Language
        {
            get;
        }

        /// <summary>
        /// The channel type for agi_channel.
        /// </summary>
        string Type
        {
            get;
        }

        /// <summary>
        /// The uniqueid of agi_channel.
        /// </summary>
        string UniqueId
        {
            get;
        }

        /// <summary>
        /// The Asterisk version in use.
        /// </summary>
        string Version
        {
            get;
        }

        /// <summary>
        /// The full caller ID string that is set on agi_channel.
        /// </summary>
        string CallerId
        {
            get;
        }

        /// <summary>
        /// The caller ID name that is set on agi_channel.
        /// </summary>
        string CallerIdName
        {
            get;
        }

        /// <summary>
        /// The caller presentation associated with the caller ID set on agi_channel. For more information, see the output of core show function CALLERPRES at the Asterisk CLI.
        /// </summary>
        string CallingPres
        {
            get;
        }

        /// <summary>
        /// The caller ANI2 associated with agi_channel.
        /// </summary>
        string CallingANI2
        {
            get;
        }

        /// <summary>
        /// The caller ID TON (Type of Number) associated with agi_channel.
        /// </summary>
        string CallingTON
        {
            get;
        }

        /// <summary>
        /// The dialed number TNS (Transit Network Select) associated with agi_channel.
        /// </summary>
        string CallingTNS
        {
            get;
        }

        /// <summary>
        /// The dialed number associated with agi_channel.
        /// </summary>
        string DNID
        {
            get;
        }

        /// <summary>
        /// The redirecting number associated with agi_channel.
        /// </summary>
        string RDNIS
        {
            get;
        }

        /// <summary>
        /// The context of the dialplan that agi_channel was in when it executed the AGI() or EAGI() application.
        /// </summary>
        string Context
        {
            get;
        }

        /// <summary>
        /// The extension in the dialplan that agi_channel was executing when it ran the AGI() or EAGI() application.
        /// </summary>
        string Extension
        {
            get;
        }

        /// <summary>
        /// The priority of agi_extension in agi_context that executed AGI() or EAGI().
        /// </summary>
        string Priority
        {
            get;
        }

        /// <summary>
        /// An indication of whether AGI() or EAGI() was used from the dialplan. 0.0 indicates that AGI() was used. 1.0 indicates that EAGI() was used.
        /// </summary>
        string Enhanced
        {
            get;
        }

        /// <summary>
        /// The accountcode associated with agi_channel.
        /// </summary>
        string AccountCode
        {
            get;
        }

        /// <summary>
        /// The threadid of the thread in Asterisk that is running the AGI() or EAGI() application. This may be useful for associating logs generated by the AGI application with logs generated by Asterisk, since the Asterisk logs contain thread IDs.
        /// </summary>
        string ThreadId
        {
            get;
        }

        /// <summary>
        /// 
        /// </summary>
        string Script
        {
            get;
        }
    }
}